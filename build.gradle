plugins {
    id 'com.github.ben-manes.versions' version '0.20.0'
    id 'com.github.hierynomus.license' version '0.15.0'
    id 'jacoco'
    id 'java'
    id 'idea'
    id 'io.spring.dependency-management' version '1.0.6.RELEASE'
    id 'org.sonarqube' version '2.6.2'
    id 'org.springframework.boot' version '2.1.1.RELEASE'
}

clean {
    delete 'data'
}

license {
    ignoreFailures true
    header = file('LICENSE')
}

bootJar {
    baseName = 'pivio-server'
    version = '1.2.0'
}

repositories {
    jcenter()
}

dependencies {
    implementation 'com.flipkart.zjsonpatch:zjsonpatch:0.4.6'
    implementation 'org.apache.commons:commons-lang3:3.8.1'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    testImplementation 'com.jayway.jsonpath:json-path'
    testImplementation 'org.apache.commons:commons-text:1.6'
    testImplementation 'org.assertj:assertj-core:3.11.1'
    testImplementation 'org.awaitility:awaitility:3.1.5'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.testcontainers:testcontainers:1.10.3'
}

// see https://github.com/ben-manes/gradle-versions-plugin
dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

wrapper {
    gradleVersion = '5.0'
}

tasks.withType(Test) {
    systemProperty 'gradleIsRunning', true
}